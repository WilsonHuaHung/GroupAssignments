**Progress Report: Animation Project**

**Group: 19**

**Project Title: Stuck in Space**

**Team Members:**
- Wilson Hua
- Michael Crosson
- Ginger Hudson

**Current Progress:**

**Animation "Story":**
The animation depicts a scenario where a satellite (ship) is stuck in space. The satellite is adrift in the vastness of space, with no apparent means of propulsion. The animation aims to convey a sense of isolation and the endless expanse of space.

**Objects Being Animated:**
- Satellite (Ship)
- Michael stars
- Ginger planet 

**Duration:**
The animation is designed to loop continuously, creating a sense of the satellite's perpetual journey through space.
Stars will fly by and twinkle with different colors based on a star class
[Ginger tbd]

**Technical Considerations:**
- Class 1: Wilson - Ship Class
  - This class is responsible for defining the behavior and appearance of the satellite (ship).
  - The ship class includes transformations and animations related to its movement and rotation in space.
  - Progress: The Ship class has been created, and the ship rotates and moves horizontally across the screen.

- Class 2: Michael - star class
  - Stars will spin and have different colors based on how they're declared
  - Progress: drafting code stage

- Class 3: Ginger - [Object Class]
  - The planet class will be a animation that represents the planet Jupiter and will spin and travel across the screen using cosine interpolation. My class will differ from the other classes by being a larger size than the spaceship and stars and will have a slower movement in comparsison
  - Progress: The code is being drafted and locating an accurate 3d model of Jupiter
- 3d model of jupiter from Nasa https://science.nasa.gov/resource/jupiter-3d-model/ 

Outline
class Planets {
  PShape planetModel;
  float radius;
  float angleX;
  float speed;
  float startX;
  float endX;
  float currentX;
  
  Planets(float r, float s, float start, float end) {
    radius = r;
    angleX = 0;
    speed = s;
    startX = start;
    endX = end;
    currentX = startX;
  }

  void update() {
    angleX += radians(speed);
    currentX = lerp(startX, endX, 0.5 + 0.5 * cos(angleX)); // Cosine interpolation
  }

  void display() {
    pushMatrix();
    translate(currentX, 0, 0);
    rotateX(angleX);
    shape(planetModel);
    popMatrix();
  }


**Integration Plan:**
- Wilson will integrate the Ship class with the other object classes created by Michael and Ginger.
- Michael will complete the implementation of the star class as a separate file that will be called in the main.pde file
- Ginger will complete the implementation of the Planet class and integrate in into the completed scene
- The final submission will involve combining all object classes to create the complete animation.

**Next Steps:**
- Wilson will continue refining the Ship class, adding more details and interactions.
- Michael will work on their star class, implementing the necessary behaviors and transformations.
- Ginger will work on their planet class, implementing the necessary behaviors and transformations.
- The team will coordinate to integrate the individual components into the final animation.

**Challenges Faced:**
- One challenge the team has encountered is determining the objects to create and how they will relate to each team member's objects.

**Overall Progress:**
- The team has just started the project and is in the planning phase, brainstorming ideas and defining the scope of the animation.

---
